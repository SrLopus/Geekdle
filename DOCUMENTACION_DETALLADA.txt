DOCUMENTACIÓN TÉCNICA DETALLADA GEEKDLE
=====================================

1. INTRODUCCIÓN Y CONTEXTO
-------------------------
1.1. Visión General
    Geekdle es una aplicación web moderna que combina la mecánica de Wordle con un enfoque educativo en tecnología
    y cultura geek. La aplicación está diseñada para ofrecer una experiencia de aprendizaje gamificada que mantiene
    a los usuarios comprometidos mientras expanden su vocabulario técnico.

1.2. Propósito y Objetivos
    - Crear una plataforma educativa interactiva
    - Fomentar el aprendizaje de terminología técnica
    - Construir una comunidad activa de usuarios
    - Proporcionar una experiencia de juego adictiva
    - Generar datos valiosos sobre patrones de aprendizaje

1.3. Público Objetivo
    - Desarrolladores y profesionales IT
    - Estudiantes de carreras tecnológicas
    - Entusiastas de la tecnología
    - Educadores en el campo tecnológico
    - Jugadores casuales interesados en tecnología

2. ARQUITECTURA DEL SISTEMA
--------------------------
2.1. Frontend (Next.js + React)
    2.1.1. Tecnologías Principales
        - Next.js 13+ (App Router)
        - React 18+
        - TypeScript 5+
        - Tailwind CSS 3+
        - Framer Motion
        - Zustand (Gestión de estado)
        - React Query (Gestión de datos)
        - Axios (Cliente HTTP)

    2.1.2. Estructura de Componentes
        a) Componentes Atómicos
           - Button
             * Variantes: primary, secondary, outline
             * Estados: default, hover, active, disabled
             * Props: variant, size, icon, loading
             * Accesibilidad: ARIA labels, keyboard navigation

           - Input
             * Tipos: text, password, email
             * Validación en tiempo real
             * Mensajes de error
             * Autocompletado

           - Card
             * Layouts: default, compact, expanded
             * Animaciones de hover
             * Responsive design
             * Accesibilidad

        b) Componentes Moleculares
           - GameBoard
             * Grid system para intentos
             * Animaciones de entrada
             * Feedback visual
             * Estado de juego

           - Keyboard
             * Layout QWERTY
             * Estados de teclas
             * Animaciones de presión
             * Soporte táctil

           - Statistics
             * Gráficos de distribución
             * Animaciones de progreso
             * Exportación de datos
             * Filtros temporales

        c) Componentes Organismos
           - GameContainer
             * Gestión de estado del juego
             * Lógica de validación
             * Comunicación con API
             * Manejo de errores

           - ProfileSection
             * Información de usuario
             * Estadísticas detalladas
             * Configuración
             * Logros

    2.1.3. Sistema de Rutas
        /app
        ├── page.tsx                 # Página principal
        ├── game/
        │   ├── page.tsx            # Modo diario
        │   ├── infinite/
        │   │   └── page.tsx        # Modo infinito
        │   └── practice/
        │       └── page.tsx        # Modo práctica
        ├── profile/
        │   ├── page.tsx            # Perfil principal
        │   ├── settings/
        │   │   └── page.tsx        # Configuración
        │   └── stats/
        │       └── page.tsx        # Estadísticas
        └── auth/
            ├── login/
            │   └── page.tsx        # Login
            └── register/
                └── page.tsx        # Registro

    2.1.4. Gestión de Estado
        a) Estado Global (Zustand)
           - AuthStore
             * Estado de autenticación
             * Información de usuario
             * Tokens
             * Preferencias

           - GameStore
             * Estado actual del juego
             * Intentos
             * Palabra objetivo
             * Estadísticas en tiempo real

           - UIStore
             * Tema (claro/oscuro)
             * Modales activos
             * Notificaciones
             * Estado de carga

        b) Estado Local (React)
           - Formularios
           - Componentes controlados
           - Estado de UI específico

    2.1.5. Estilos y Temas
        a) Sistema de Diseño
           - Colores
             * Primarios
             * Secundarios
             * Acentos
             * Estados (éxito, error, advertencia)

           - Tipografía
             * Familias de fuentes
             * Tamaños
             * Pesos
             * Espaciado

           - Espaciado
             * Sistema de grid
             * Márgenes
             * Padding
             * Breakpoints

        b) Temas
           - Claro
           - Oscuro
           - Alto contraste
           - Personalizado

2.2. Backend (Laravel + MySQL)
    2.2.1. Tecnologías Principales
        - Laravel 10+
        - PHP 8.2+
        - MySQL 8.0+
        - Redis (Caché)
        - JWT (Autenticación)
        - Laravel Sanctum
        - Laravel Horizon (Colas)

    2.2.2. Estructura de la API
        a) Controladores
           - AuthController
             * Registro
             * Login
             * Logout
             * Refresh token
             * Recuperación de contraseña

           - GameController
             * Inicio de partida
             * Validación de intentos
             * Finalización de partida
             * Estadísticas

           - UserController
             * Perfil
             * Configuración
             * Estadísticas
             * Logros

        b) Modelos
           - User
             * Relaciones
             * Scopes
             * Mutators
             * Accessors

           - Game
             * Estados
             * Validaciones
             * Eventos
             * Observers

           - Word
             * Categorías
             * Dificultad
             * Estadísticas de uso

        c) Middleware
           - Auth
           - Rate Limiting
           - CORS
           - Logging

    2.2.3. Base de Datos
        a) Esquema Principal
           - users
             * Campos básicos
             * Campos de autenticación
             * Campos de perfil
             * Campos de configuración

           - games
             * Campos de juego
             * Campos de estado
             * Campos de puntuación
             * Campos de tiempo

           - words
             * Campos de palabra
             * Campos de categoría
             * Campos de dificultad
             * Campos de uso

           - statistics
             * Campos de estadísticas
             * Campos de progreso
             * Campos de logros
             * Campos de ranking

        b) Índices y Optimización
           - Índices primarios
           - Índices secundarios
           - Índices compuestos
           - Optimización de consultas

        c) Relaciones
           - One-to-Many
           - Many-to-Many
           - Polymorphic
           - Has-Many-Through

[Continuará en la siguiente parte...] 